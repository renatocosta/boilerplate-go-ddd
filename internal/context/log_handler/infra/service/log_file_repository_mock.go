// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/log_handler/domain/model/logfile/log_file_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/context/log_handler/domain/model/logfile/log_file_repository.go -destination=internal/context/log_handler/infra/service/log_file_repository_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	logfile "github.com/ddd/internal/context/log_handler/domain/model/logfile"
	gomock "go.uber.org/mock/gomock"
)

// MockLogFileRepository is a mock of LogFileRepository interface.
type MockLogFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogFileRepositoryMockRecorder
}

// MockLogFileRepositoryMockRecorder is the mock recorder for MockLogFileRepository.
type MockLogFileRepositoryMockRecorder struct {
	mock *MockLogFileRepository
}

// NewMockLogFileRepository creates a new mock instance.
func NewMockLogFileRepository(ctrl *gomock.Controller) *MockLogFileRepository {
	mock := &MockLogFileRepository{ctrl: ctrl}
	mock.recorder = &MockLogFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogFileRepository) EXPECT() *MockLogFileRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLogFileRepository) Add(entity logfile.LogFile, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", entity, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockLogFileRepositoryMockRecorder) Add(entity, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLogFileRepository)(nil).Add), entity, ctx)
}

// ReadFrom mocks base method.
func (m *MockLogFileRepository) ReadFrom(path string) (*logfile.LogFileEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", path)
	ret0, _ := ret[0].(*logfile.LogFileEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockLogFileRepositoryMockRecorder) ReadFrom(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockLogFileRepository)(nil).ReadFrom), path)
}
