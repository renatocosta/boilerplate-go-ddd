// Code generated by MockGen. DO NOT EDIT.
// Source: internal/shared/workflow.go
//
// Generated by this command:
//
//	mockgen -source=internal/shared/workflow.go -package=shared -destination=internal/shared/workflow/workflow_mock.go -package=workflow
//

// Package workflow is a generated GoMock package.
package workflow

import (
	context "context"
	reflect "reflect"

	command "github.com/ddd/internal/context/log_handler/app/command"
	events "github.com/ddd/internal/context/log_handler/domain/model/logfile/events"
	workflow "go.temporal.io/sdk/workflow"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkFlowable is a mock of WorkFlowable interface.
type MockWorkFlowable struct {
	ctrl     *gomock.Controller
	recorder *MockWorkFlowableMockRecorder
}

// MockWorkFlowableMockRecorder is the mock recorder for MockWorkFlowable.
type MockWorkFlowableMockRecorder struct {
	mock *MockWorkFlowable
}

// NewMockWorkFlowable creates a new mock instance.
func NewMockWorkFlowable(ctrl *gomock.Controller) *MockWorkFlowable {
	mock := &MockWorkFlowable{ctrl: ctrl}
	mock.recorder = &MockWorkFlowableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkFlowable) EXPECT() *MockWorkFlowableMockRecorder {
	return m.recorder
}

// HumanFile mocks base method.
func (m *MockWorkFlowable) HumanFile(ctx context.Context, command command.CreateHumanLogFileCommand) ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HumanFile", ctx, command)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HumanFile indicates an expected call of HumanFile.
func (mr *MockWorkFlowableMockRecorder) HumanFile(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HumanFile", reflect.TypeOf((*MockWorkFlowable)(nil).HumanFile), ctx, command)
}

// PlayersKilled mocks base method.
func (m *MockWorkFlowable) PlayersKilled(ctx context.Context, data [][]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayersKilled", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayersKilled indicates an expected call of PlayersKilled.
func (mr *MockWorkFlowableMockRecorder) PlayersKilled(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayersKilled", reflect.TypeOf((*MockWorkFlowable)(nil).PlayersKilled), ctx, data)
}

// PlayersKilledWorkflow mocks base method.
func (m *MockWorkFlowable) PlayersKilledWorkflow(ctx workflow.Context, input command.CreateHumanLogFileCommand) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayersKilledWorkflow", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlayersKilledWorkflow indicates an expected call of PlayersKilledWorkflow.
func (mr *MockWorkFlowableMockRecorder) PlayersKilledWorkflow(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayersKilledWorkflow", reflect.TypeOf((*MockWorkFlowable)(nil).PlayersKilledWorkflow), ctx, input)
}

// StartFrom mocks base method.
func (m *MockWorkFlowable) StartFrom(event events.LogFileSelected) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartFrom", event)
}

// StartFrom indicates an expected call of StartFrom.
func (mr *MockWorkFlowableMockRecorder) StartFrom(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFrom", reflect.TypeOf((*MockWorkFlowable)(nil).StartFrom), event)
}

// Undo mocks base method.
func (m *MockWorkFlowable) Undo(ctx context.Context, command command.CreateHumanLogFileCommand) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undo", ctx, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Undo indicates an expected call of Undo.
func (mr *MockWorkFlowableMockRecorder) Undo(ctx, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undo", reflect.TypeOf((*MockWorkFlowable)(nil).Undo), ctx, command)
}
